<!--
	Created By Coveros Inc. for SBD2 Inc. as a work for hire all 2016 rights reserved.
	Author: Glenn Buckholz glenn.buckholz@coveros.com 

	Description:
	This is a sample build file that has autoincrementing versions. This simulates the snapshot release philosophy in maven. 
    For this to work you need a working nexus repository with a snapshot and release repository. The repositories are defined in 
    ivysettings.xml. Additionally do to a bad interaction between nexus and ivy, you need to run an apache server that points to 
    the base of the nexeus artifact storage. ivy tries to traverse the sonatype branding URLs and errors out when determining the build number
    when pointing directly to nexus. As is this assumes nexus running on localhost:8081 and apache on localhost:81        
-->

<project xmlns:ivy="antlib:org.apache.ivy.ant" name="go-ivy" default="jar">

<!--
	here is the version of ivy we will use. change this property to try a newer 
	version if you want 
-->
	<property name="ivy.install.version" value="2.4.0" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

<!--
	Thses are the basic java build properties
	build.dir - destination for class files
	src.dir   - svn/git source files
	dis.dir   - destination for assembled jar files from the build
	lib.dir   - destination for downloaded thrid party lib jar files and external dependancies
-->	
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="dist.dir" value="dist" />
	<property name="lib.dir" value="lib" />

<!--
	================================= 
	target: check-ivy         
    If the ivy jar exists don't redownload. 
    ================================= 
-->	
	<target name="check-ivy">
	    <available file="${ivy.jar.file}" property="skip.download"/>
	</target>

	
	
<!--
	 ================================= 
	 target: download-ivy         
     Downloads the ivy jar and places it in the ivy directory
     ================================= 
-->
	<target name="download-ivy" unless="skip.download" depends="check-ivy" >
		
		<!-- Create a location for the ivy jars -->
		<mkdir dir="${ivy.jar.dir}" />
		
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..." />
		<get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>
	
<!--
	 ================================= 
	 target: install-ivy         
     this target is not necessary if you put ivy.jar in your ant lib directory
     if you already have ivy in your ant lib, you can simply remove this
     target and the dependency the 'go' target has on it
     try to load ivy here from local ivy dir, in case the user has not already dropped
     it into ant's lib dir (note that the latter copy will always take precedence).
     We will not fail as long as local lib dir exists (it may be empty) and
     ivy is in at least one of ant's lib dir or the local lib dir
     ================================= 
-->
	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

<!--
	================================= 
    target: go
    Go ivy, go!
    ================================= 
-->
	<target name="go" depends="install-ivy, generate-src" description="--> resolve dependencies, compile and run the project">
		<echo message="using ivy to resolve commons-lang 2.1..." />

<!--
	here comes the magic line: asks ivy to resolve a dependency on 
    commons-lang 2.1 and to build an ant path with it from its cache  
-->
		<ivy:cachepath organisation="commons-lang" module="commons-lang" revision="2.1" pathid="lib.path.id" inline="true" />
		<echo message="compiling..." />
		<mkdir dir="${build.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" />
		<echo>
We are now ready to execute our simple program with its dependency on commons-lang. Let's go!
		</echo>
		<java classname="example.Hello">
			<classpath>
				<path refid="lib.path.id" />
				<path location="${build.dir}" />
			</classpath>
		</java>
	</target>

<!--
	================================= 
    target: generate-src
    'Generates' the class source. It actually just echo a simple java 
    source code to a file. In real life this file would already be
    present on your file system, and this target wouldn't be necessary.
    ================================= 
-->
	<target name="generate-src">
		<mkdir dir="${src.dir}/example" />
		<echo file="${src.dir}/example/Hello.java">
package example; import org.apache.commons.lang.WordUtils; public class Hello { public static void main(String[] args) { String message = "hello ivy !"; System.out.println("standard message : " + message); System.out.println("capitalized by " + WordUtils.class.getName() + " : " + WordUtils.capitalizeFully(message)); } }
	</echo>
	</target>

<!--
	================================= 
    target: clean              
    ================================= 
-->
	<target name="clean" description="--> clean the project">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${src.dir}" />
			<fileset dir="${build.dir}" />
			<fileset dir="${dist.dir}" />
			<fileset dir="${lib.dir}" />
		</delete>
	</target>

<!--
	================================= 
    target: jar
    Creates a Jar file in the dist directory              
	================================= 
-->
	<target name="jar" depends="go">
		<mkdir dir="${dist.dir}" />
		<ivy:retrieve conf="build" pattern="${lib.dir}/[artifact](-[classifier]).[ext]" />
		<jar destfile="${dist.dir}/${ivy.module}.jar" basedir="${build.dir}">
			<manifest>
				<attribute name="Main-Class" value="example.Hello" />
			</manifest>
		</jar>
	</target>


<!--
	================================= 
    target: snapshot
    Upload the jar created as a snapshot. The version number is determined by the version in releases
    plus 1 and the current snapshot build number plus one. If there are no snapshots  at that version the build number is 0.               
	================================= 
-->
	<target name="snapshot" depends="jar">
		<!-- Find the latest release version -->
		<ivy:buildnumber organisation="org.apache" module="helloivy" resolver="buildnum-releases" />
		<!-- Find the latest snapshot build number for this version series -->
		<ivy:buildnumber organisation="org.apache" module="helloivy" resolver="buildnum-snapshots" prefix="ivysnap" revision="${ivy.new.revision}" />
		<echo>
Creating ${ivy.module}-${ivy.new.revision}.${ivysnap.new.build.number}
		</echo>
		<!-- Find the latest snapshot build number for this version series --> 
		<move file="${dist.dir}/${ivy.module}.jar" toFile="${dist.dir}/${ivy.module}-${ivy.new.revision}.${ivysnap.new.build.number}-SNAPSHOT.jar" verbose="true" />
		<!-- Set the ivy delivery options --> 
		<ivy:deliver deliverpattern="${dist.dir}/ivy.xml" pubrevision="${ivy.new.revision}.${ivysnap.new.build.number}-SNAPSHOT" status="release" />
		<!-- make the pom file so ivy can publish it to nexus -->
		<ivy:makepom ivyfile="${dist.dir}/ivy.xml" pomfile="${dist.dir}/${ivy.module}-${ivy.new.revision}.${ivysnap.new.build.number}-SNAPSHOT.pom" />
		<!-- resolve dunamically sets the version -->
		<ivy:resolve revision="${ivy.new.revision}.${ivysnap.new.build.number}-SNAPSHOT" />
		<!-- This publishes to the snapshot repo at the calculated version -->
		<ivy:publish resolver="nexus-snapshots" revision="${ivy.new.revision}.${ivysnap.new.build.number}-SNAPSHOT" overwrite="true" publishivy="false">
			<artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]" />
		</ivy:publish>
	</target>


	<target name="test">
		<ivy:buildnumber organisation="org.apache" module="helloivy" resolver="buildnum-releases" default="0.0" />
		<echo>
	   ${ivy.new.revision} :: ${ivy.organisation} :: ${ivy.module} :: ${ivy.revision} :: ${ivy.build.number} :: ${ivy.new.build.number}
	</echo>
		<ivy:buildnumber organisation="org.apache" module="helloivy" resolver="buildnum-snapshots" prefix="ivysnap" revision="${ivy.new.revision}." />
		<echo>
	   ${ivysnap.new.revision} :: ${ivysnap.organisation} :: ${ivysnap.module} :: ${ivysnap.revision} :: ${ivysnap.build.number} :: ${ivysnap.new.build.number} :: I woule make ${ivy.new.revision}.${ivysnap.new.build.number}-SNAPSHOT
	</echo>
	</target>

<!--
	================================= 
    target: release
    Upload the jar created as a snapshot. The version number is determined by the version in releases
    plus 1 and the current snapshot build number plus one. If there are no snapshots  at that version the build number is 0.               
	================================= 
-->
	<target name="release" depends="jar">
		<ivy:buildnumber organisation="org.apache" module="helloivy" resolver="buildnum-releases" />
		<echo>
	   ${ivy.new.revision} :: ${ivy.organisation} :: ${ivy.module} :: ${ivy.revision} :: ${ivy.build.number} :: ${ivy.new.build.number}
	</echo>
		<move file="${dist.dir}/${ivy.module}.jar" toFile="${dist.dir}/${ivy.module}-${ivy.new.revision}.jar" verbose="true" />
		<ivy:deliver deliverpattern="${dist.dir}/ivy.xml" pubrevision="${ivy.new.revision}" status="release" />
		<ivy:makepom ivyfile="${dist.dir}/ivy.xml" pomfile="${dist.dir}/${ivy.module}-${ivy.new.revision}.pom" />
		<ivy:resolve revision="${ivy.new.revision}" />
		<ivy:publish resolver="nexus-releases" revision="${ivy.new.revision}" overwrite="true" publishivy="false">
			<artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]" />
		</ivy:publish>
	</target>

<!--
	================================= 
    target: clean-ivy              
    ================================= 
-->
	<target name="clean-ivy" description="--> clean the ivy installation">
		<delete dir="${ivy.jar.dir}" />
	</target>

<!--
	================================= 
    target: clean-cache              
    ================================= 
-->
	<target name="clean-cache" depends="install-ivy" description="--> clean the ivy cache">
		<ivy:cleancache/>
	</target>
	
</project>